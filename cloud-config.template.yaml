#cloud-config

package_update: true

write_files:
  - owner: root:root
    path: /opt/env.my
    permissions: '0600'
    content: |
        JICOFO_COMPONENT_SECRET=
        JICOFO_AUTH_PASSWORD=
        JVB_AUTH_PASSWORD=
        JIGASI_XMPP_PASSWORD=
        JIBRI_RECORDER_PASSWORD=
        JIBRI_XMPP_PASSWORD=
        CONFIG=/storage/jitsi-meet-cfg
        HTTP_PORT=80
        HTTPS_PORT=443
        TZ=Europe/Berlin
        XMPP_DOMAIN=meet.jitsi
        XMPP_SERVER=xmpp.meet.jitsi
        XMPP_BOSH_URL_BASE=http://xmpp.meet.jitsi:5280
        XMPP_AUTH_DOMAIN=auth.meet.jitsi
        XMPP_MUC_DOMAIN=muc.meet.jitsi
        XMPP_INTERNAL_MUC_DOMAIN=internal-muc.meet.jitsi
        XMPP_GUEST_DOMAIN=guest.meet.jitsi
        XMPP_MODULES=
        XMPP_MUC_MODULES=
        XMPP_INTERNAL_MUC_MODULES=
        JVB_BREWERY_MUC=jvbbrewery
        JVB_AUTH_USER=jvb
        JVB_STUN_SERVERS=meet-jit-si-turnrelay.jitsi.net:443
        JVB_PORT=10000
        JVB_TCP_HARVESTER_DISABLED=true
        JVB_TCP_PORT=4443
        JVB_TCP_MAPPED_PORT=4443
        JICOFO_AUTH_USER=focus
        JIGASI_XMPP_USER=jigasi
        JIGASI_BREWERY_MUC=jigasibrewery
        JIGASI_PORT_MIN=20000
        JIGASI_PORT_MAX=20050
        XMPP_RECORDER_DOMAIN=recorder.meet.jitsi
        JIBRI_RECORDER_USER=recorder
        JIBRI_RECORDING_DIR=/config/recordings
        JIBRI_FINALIZE_RECORDING_SCRIPT_PATH=/config/finalize.sh
        JIBRI_XMPP_USER=jibri
        JIBRI_BREWERY_MUC=jibribrewery
        JIBRI_PENDING_TIMEOUT=90
        JIBRI_STRIP_DOMAIN_JID=muc
        JIBRI_LOGS_DIR=/config/logs
        ENABLE_AUTH=1
        ENABLE_GUESTS=1
        AUTH_TYPE=internal
        ENABLE_LETSENCRYPT=1
        LETSENCRYPT_DOMAIN={{cc_frontend_domain}}
        LETSENCRYPT_EMAIL={{cc_letsencrypt_mail}}
        ENABLE_HTTP_REDIRECT=1
  - owner: root:root
    path: /opt/boot_init
    permissions: '0755'
    content: |
        #/bin/bash -e
        dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
        dnf -y install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.13-3.1.el7.x86_64.rpm
        dnf -y install docker-ce git
        systemctl enable docker
        systemctl start docker
        curl -L https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep "tag_name" | cut -d \" -f4)/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        cd /opt
        git clone https://github.com/jitsi/docker-jitsi-meet
        cd /opt/docker-jitsi-meet
        cp /opt/env.my .env && chmod 0600 .env
        ./gen-passwords.sh
        mkdir -p /storage/jitsi-meet-cfg/{web/letsencrypt,transcripts,prosody,jicofo,jvb,jigasi,jibri}
        docker-compose up -d
  - owner: root:root
    path: /opt/sectweak
    permissions: '0755'
    content: |
        #/bin/bash
        sed -i 's|[#]*PasswordAuthentication yes|PasswordAuthentication no|g' /etc/ssh/sshd_config
        sed -i 's|ChallengeResponseAuthentication yes|ChallengeResponseAuthentication no|g' /etc/ssh/sshd_config
        sed -i 's|GSSAPIAuthentication yes|GSSAPIAuthentication no|g' /etc/ssh/sshd_config
        dnf -y install epel-release
        dnf -y install nano htop
        /opt/set_iptables
        
  - owner: root:root
    path: /opt/set_iptables
    permissions: '0755'
    content: |   
        #!/bin/bash
        
        iptables -N EXT-TRAFFIC | iptables -F EXT-TRAFFIC
        iptables -A INPUT -i eth0 -j EXT-TRAFFIC
        iptables -A INPUT -i eth0:1 -j EXT-TRAFFIC
        ip6tables -N EXT-TRAFFIC | ip6tables -F EXT-TRAFFIC
        ip6tables -A INPUT -i eth0 -j EXT-TRAFFIC
        ip6tables -A INPUT -i eth0:1 -j EXT-TRAFFIC
        
        iptables -A EXT-TRAFFIC -m state --state ESTABLISHED -j ACCEPT
        iptables -A EXT-TRAFFIC -p icmp -j ACCEPT
        iptables -A EXT-TRAFFIC -p tcp -m tcp --dport 22 -j ACCEPT
        iptables -A EXT-TRAFFIC -p tcp -m tcp --dport 80 -j ACCEPT
        iptables -A EXT-TRAFFIC -p tcp -m tcp --dport 443 -j ACCEPT
        iptables -A EXT-TRAFFIC -p tcp -m tcp --dport 4443 -j ACCEPT
        iptables -A EXT-TRAFFIC -p udp -m udp --dport 10000 -j ACCEPT
        iptables -A EXT-TRAFFIC -j REJECT
        
        ip6tables -A EXT-TRAFFIC -m state --state ESTABLISHED -j ACCEPT
        ip6tables -A EXT-TRAFFIC -p icmpv6 -j ACCEPT
        ip6tables -A EXT-TRAFFIC -p tcp -m tcp --dport 22 -j ACCEPT
        ip6tables -A EXT-TRAFFIC -p tcp -m tcp --dport 80 -j ACCEPT
        ip6tables -A EXT-TRAFFIC -p tcp -m tcp --dport 443 -j ACCEPT
        ip6tables -A EXT-TRAFFIC -p tcp -m tcp --dport 4443 -j ACCEPT
        ip6tables -A EXT-TRAFFIC -p udp -m udp --dport 10000 -j ACCEPT
        ip6tables -A EXT-TRAFFIC -j REJECT
        
  - owner: root:root
    path: /usr/bin/addtalkuser
    permissions: '0755'
    content: |
        #/bin/sh
        docker-compose exec prosody /usr/bin/prosodyctl --config /config/prosody.cfg.lua register $1 meet.jitsi $2
  - owner: root:root
    path: /usr/bin/addlogo
    permissions: '0755'
    content: |
        #/bin/sh
        echo 'location = /images/watermark.png { return 301 {{cc_remote_watermark_image}}; }' >> /storage/jitsi-meet-cfg/web/nginx/meet.conf
        docker-compose restart web
  - owner: root:root
    path: /etc/sysconfig/network-scripts/ifcfg-eth0:1
    content: |
        BOOTPROTO=static
        DEVICE=eth0:1
        IPADDR={{cc_server_ipv4}}
        PREFIX=32
        TYPE=Ethernet
        USERCTL=no
        ONBOOT=yes


runcmd:
    - [ /bin/sh, -c, 'echo "IPV6ADDR_SECONDARIES={{cc_server_ipv6}}" >> /etc/sysconfig/network-scripts/ifcfg-eth0' ]
    - [ /opt/boot_init ]
    - [ /opt/sectweak ]
    - [ /usr/sbin/ifdown, eth0 ]
    - [ /usr/sbin/ifup, eth0 ]
    - [ /bin/systemctl, restart, sshd.service ]
# /usr/bin/addlogo can only be executed after upstart of web, but no trigger available...
